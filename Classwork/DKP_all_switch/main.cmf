%CMF
# %PSECTS Section
# For each object file, details of its psects are enumerated here.
# The begining of the section is indicated by %PSECTS.  The first
# line indicates the name of the first object file, e.g.
#    $foo.obj
# Each line that follows describes a psect in that object file, until
# the next object file.  The lines that describe a psect have the
# format:
#    <psect name> <class name> <space> <link address> <load addresses> <length> <delta>
# All addresses and the length are given in unqualified hexadecimal
# in delta units.  Any other numeric values are decimal.
%PSECTS
$main.obj
cinit CODE 0 2F80 2F80 18 1
text0 CODE 0 2FC6 2FC6 3A 1
text1 CODE 0 2F98 2F98 2E 1
text2 CODE 0 2F70 2F70 10 1
idataCOMRAM CODE 0 3000 3000 1 1
cstackCOMRAM COMRAM 1 1 1 4 1
dataCOMRAM COMRAM 1 5 5 1 1
$startup.obj
end_init CODE 0 0 0 4 1
# %UNUSED Section
# This section enumerates the unused ranges of each CLASS. Each entry
# is described on a single line as follows:
#    <class name> <range> <delta>
# Addresses given in the range are in hexadecimal and units of delta.
%UNUSED
RAM 60-5FF 1
SFR D00-FFF 1
BANK0 60-FF 1
BANK1 100-1FF 1
BANK2 200-2FF 1
BANK3 300-3FF 1
BANK4 400-4FF 1
BANK5 500-5FF 1
CONST 4-2F6F 1
IDLOC 200000-200007 1
STACK 60-5FF 1
SMALLCONST 600-2F6F 1
CODE 4-2F6F 1
BIGRAM 6-5FF 1
COMRAM 6-5F 1
CONFIG 300000-30000D 1
EEDATA F00000-F000FF 1
MEDIUMCONST 600-2F6F 1
# %LINETAB Section
# This section enumerates the file/line to address mappings.
# The beginning of the section is indicated by %LINETAB.
# The first line indicates the name of the first object file, e.g.
#   $foo.obj
# Each line that follows describes a single mapping until the next
# object file.  Mappings have the following format:
#    <address> <psect name> <class name> ><line number>:<file name>
# The address is absolute and given given in unqualified hex 
# in delta units of the psect. All mappings within an object file
# are in ascending order of addresses.
# All other numeric values are in decimal.
%LINETAB
$main.obj
2F70 text2 CODE >37:/home/harsha/repo/MC/Embedded_C/Classwork/DKP_all_switch/main.c
2F70 text2 CODE >39:/home/harsha/repo/MC/Embedded_C/Classwork/DKP_all_switch/main.c
2F76 text2 CODE >40:/home/harsha/repo/MC/Embedded_C/Classwork/DKP_all_switch/main.c
2F7A text2 CODE >41:/home/harsha/repo/MC/Embedded_C/Classwork/DKP_all_switch/main.c
2F7E text2 CODE >42:/home/harsha/repo/MC/Embedded_C/Classwork/DKP_all_switch/main.c
2F98 text1 CODE >43:/home/harsha/repo/MC/Embedded_C/Classwork/DKP_all_switch/main.c
2F9A text1 CODE >47:/home/harsha/repo/MC/Embedded_C/Classwork/DKP_all_switch/main.c
2FA0 text1 CODE >49:/home/harsha/repo/MC/Embedded_C/Classwork/DKP_all_switch/main.c
2FA4 text1 CODE >51:/home/harsha/repo/MC/Embedded_C/Classwork/DKP_all_switch/main.c
2FA6 text1 CODE >52:/home/harsha/repo/MC/Embedded_C/Classwork/DKP_all_switch/main.c
2FAC text1 CODE >55:/home/harsha/repo/MC/Embedded_C/Classwork/DKP_all_switch/main.c
2FB0 text1 CODE >56:/home/harsha/repo/MC/Embedded_C/Classwork/DKP_all_switch/main.c
2FB6 text1 CODE >61:/home/harsha/repo/MC/Embedded_C/Classwork/DKP_all_switch/main.c
2FC0 text1 CODE >63:/home/harsha/repo/MC/Embedded_C/Classwork/DKP_all_switch/main.c
2FC4 text1 CODE >69:/home/harsha/repo/MC/Embedded_C/Classwork/DKP_all_switch/main.c
2FC6 text0 CODE >12:/home/harsha/repo/MC/Embedded_C/Classwork/DKP_all_switch/main.c
2FC6 text0 CODE >15:/home/harsha/repo/MC/Embedded_C/Classwork/DKP_all_switch/main.c
2FCA text0 CODE >16:/home/harsha/repo/MC/Embedded_C/Classwork/DKP_all_switch/main.c
2FD2 text0 CODE >19:/home/harsha/repo/MC/Embedded_C/Classwork/DKP_all_switch/main.c
2FDA text0 CODE >20:/home/harsha/repo/MC/Embedded_C/Classwork/DKP_all_switch/main.c
2FE8 text0 CODE >22:/home/harsha/repo/MC/Embedded_C/Classwork/DKP_all_switch/main.c
2FF0 text0 CODE >24:/home/harsha/repo/MC/Embedded_C/Classwork/DKP_all_switch/main.c
2FF2 text0 CODE >25:/home/harsha/repo/MC/Embedded_C/Classwork/DKP_all_switch/main.c
2FFA text0 CODE >30:/home/harsha/repo/MC/Embedded_C/Classwork/DKP_all_switch/main.c
2FFE text0 CODE >17:/home/harsha/repo/MC/Embedded_C/Classwork/DKP_all_switch/main.c
2F80 cinit CODE >998:/home/harsha/repo/MC/Embedded_C/Classwork/DKP_all_switch/main.as
2F80 cinit CODE >1000:/home/harsha/repo/MC/Embedded_C/Classwork/DKP_all_switch/main.as
2F80 cinit CODE >1003:/home/harsha/repo/MC/Embedded_C/Classwork/DKP_all_switch/main.as
2F80 cinit CODE >1017:/home/harsha/repo/MC/Embedded_C/Classwork/DKP_all_switch/main.as
2F82 cinit CODE >1018:/home/harsha/repo/MC/Embedded_C/Classwork/DKP_all_switch/main.as
2F84 cinit CODE >1019:/home/harsha/repo/MC/Embedded_C/Classwork/DKP_all_switch/main.as
2F86 cinit CODE >1020:/home/harsha/repo/MC/Embedded_C/Classwork/DKP_all_switch/main.as
2F88 cinit CODE >1021:/home/harsha/repo/MC/Embedded_C/Classwork/DKP_all_switch/main.as
2F8A cinit CODE >1022:/home/harsha/repo/MC/Embedded_C/Classwork/DKP_all_switch/main.as
2F8C cinit CODE >1023:/home/harsha/repo/MC/Embedded_C/Classwork/DKP_all_switch/main.as
2F8E cinit CODE >1024:/home/harsha/repo/MC/Embedded_C/Classwork/DKP_all_switch/main.as
2F92 cinit CODE >1030:/home/harsha/repo/MC/Embedded_C/Classwork/DKP_all_switch/main.as
2F92 cinit CODE >1032:/home/harsha/repo/MC/Embedded_C/Classwork/DKP_all_switch/main.as
2F94 cinit CODE >1033:/home/harsha/repo/MC/Embedded_C/Classwork/DKP_all_switch/main.as
$startup.obj
0 end_init CODE >122:/home/harsha/repo/MC/Embedded_C/Classwork/DKP_all_switch/startup.as
0 text CODE >58:/home/harsha/repo/MC/Embedded_C/Classwork/DKP_all_switch/startup.as
0 text CODE >59:/home/harsha/repo/MC/Embedded_C/Classwork/DKP_all_switch/startup.as
0 text CODE >60:/home/harsha/repo/MC/Embedded_C/Classwork/DKP_all_switch/startup.as
0 text CODE >62:/home/harsha/repo/MC/Embedded_C/Classwork/DKP_all_switch/startup.as
0 init CODE >106:/home/harsha/repo/MC/Embedded_C/Classwork/DKP_all_switch/startup.as
0 reset_vec CODE >98:/home/harsha/repo/MC/Embedded_C/Classwork/DKP_all_switch/startup.as
# %SYMTAB Section
# An enumeration of all symbols in the program.
# The beginning of the section is indicated by %SYMTAB.
# Each line describes a single symbol as follows:
#    <label> <value> [-]<load-adj> <class> <space> <psect> <file-name>
# The value and load-adj are both in unqualified hexadecimal.
# All other numeric values are in decimal.  The load-adj is the
# quantity one needs to add to the symbol value in order to obtain the load
# address of the symbol.  This value may be signed. If the symbol
# was defined in a psect then <psect> will be "-". File-name
# is the name of the object file in which the symbol was defined.
%SYMTAB
__Lmediumconst 0 0 MEDIUMCONST 0 mediumconst main.obj
__Hspace_0 3001 0 ABS 0 - main.obj
__Hspace_1 6 0 ABS 0 - main.obj
__Hspace_2 0 0 ABS 0 - main.obj
__Hibigdata 0 0 CODE 0 ibigdata main.obj
__mediumconst 0 0 MEDIUMCONST 0 mediumconst startup.obj
__Heeprom_data 0 0 EEDATA 0 eeprom_data main.obj
main@i 2 0 COMRAM 1 cstackCOMRAM main.obj
__Lsmallconst 0 0 SMALLCONST 0 smallconst main.obj
___sp 0 0 STACK 2 stack startup.obj
_main 2FC6 0 CODE 0 text0 main.obj
start 0 0 CODE 0 init startup.obj
__size_of_main 0 0 ABS 0 - main.obj
__Hpowerup 0 0 CODE 0 powerup main.obj
__HdataCOMRAM 0 0 ABS 0 dataCOMRAM main.obj
read_digital_keypad@once 5 0 COMRAM 1 dataCOMRAM main.obj
__accesstop 60 0 ABS 0 - startup.obj
intlevel0 0 0 CODE 0 text startup.obj
intlevel1 0 0 CODE 0 text startup.obj
intlevel2 0 0 CODE 0 text startup.obj
intlevel3 0 0 CODE 0 text startup.obj
__LnvFARRAM 0 0 FARRAM 0 nvFARRAM main.obj
__Hifardata 0 0 CODE 0 ifardata main.obj
__Hclrtext 0 0 ABS 0 clrtext main.obj
__pidataCOMRAM 3000 0 CODE 0 idataCOMRAM main.obj
___inthi_sp 0 0 STACK 2 stack startup.obj
___intlo_sp 0 0 STACK 2 stack startup.obj
__LdataCOMRAM 0 0 ABS 0 dataCOMRAM main.obj
__Hintcode_body 0 0 ABS 0 intcode_body main.obj
__Lintsave_regs 0 0 BIGRAM 1 intsave_regs main.obj
main@key 4 0 COMRAM 1 cstackCOMRAM main.obj
__Hmediumconst 0 0 MEDIUMCONST 0 mediumconst main.obj
__Hintcodelo 0 0 CODE 0 intcodelo main.obj
_init_config 2F70 0 CODE 0 text2 main.obj
__LidataCOMRAM 0 0 ABS 0 idataCOMRAM main.obj
__size_of_read_digital_keypad 0 0 ABS 0 - main.obj
__Lintcodelo 0 0 CODE 0 intcodelo main.obj
start_initialization 2F80 0 CODE 0 cinit main.obj
__HnvFARRAM 0 0 FARRAM 0 nvFARRAM main.obj
read_digital_keypad@detection 1 0 COMRAM 1 cstackCOMRAM main.obj
___rparam_used 1 0 ABS 0 - main.obj
_read_digital_keypad 2F98 0 CODE 0 text1 main.obj
__Hbank0 0 0 ABS 0 bank0 main.obj
__Hbank1 0 0 ABS 0 bank1 main.obj
__Hbank2 0 0 ABS 0 bank2 main.obj
__Hbank3 0 0 ABS 0 bank3 main.obj
__Hbank4 0 0 ABS 0 bank4 main.obj
__Hbank5 0 0 ABS 0 bank5 main.obj
__Hcinit 0 0 ABS 0 cinit main.obj
__Hconst 0 0 CONST 0 const main.obj
__Hidata 0 0 CODE 0 idata main.obj
__Hidloc 0 0 IDLOC 0 idloc main.obj
__Hnvbit 0 0 COMRAM 1 nvbit main.obj
__Hparam 0 0 COMRAM 1 rparam main.obj
__Hrdata 0 0 COMRAM 1 rdata main.obj
__Hstack 0 0 STACK 2 stack main.obj
__Htext0 0 0 ABS 0 text0 main.obj
__Htext1 0 0 ABS 0 text1 main.obj
__Htext2 0 0 ABS 0 text2 main.obj
__Hbigbss 0 0 BIGRAM 1 bigbss main.obj
__Hbigram 0 0 ABS 0 bigram main.obj
__smallconst 0 0 SMALLCONST 0 smallconst startup.obj
__Hcomram 0 0 ABS 0 comram main.obj
__Hconfig 0 0 CONFIG 0 config main.obj
__Lbank0 0 0 ABS 0 bank0 main.obj
__Lbank1 0 0 ABS 0 bank1 main.obj
__Lbank2 0 0 ABS 0 bank2 main.obj
__Lbank3 0 0 ABS 0 bank3 main.obj
__Lbank4 0 0 ABS 0 bank4 main.obj
__Lbank5 0 0 ABS 0 bank5 main.obj
__Lcinit 0 0 ABS 0 cinit main.obj
__Lconst 0 0 CONST 0 const main.obj
__Lidata 0 0 CODE 0 idata main.obj
__Lidloc 0 0 IDLOC 0 idloc main.obj
__Lnvbit 0 0 COMRAM 1 nvbit main.obj
__Lparam 0 0 COMRAM 1 rparam main.obj
__Lrdata 0 0 COMRAM 1 rdata main.obj
__Lstack 0 0 STACK 2 stack main.obj
__Ltext0 0 0 ABS 0 text0 main.obj
__Ltext1 0 0 ABS 0 text1 main.obj
__Ltext2 0 0 ABS 0 text2 main.obj
__Hfarbss 0 0 FARRAM 0 farbss main.obj
__Lintcode_body 0 0 ABS 0 intcode_body main.obj
__Habs1 0 0 ABS 0 abs1 main.obj
__Hdata 0 0 ABS 0 data main.obj
__Hinit 0 0 CODE 0 init main.obj
__Hrbit 0 0 COMRAM 1 rbit main.obj
__Hrbss 0 0 COMRAM 1 rbss main.obj
__Htemp 0 0 COMRAM 1 temp main.obj
__Htext 0 0 ABS 0 text main.obj
__Labs1 0 0 ABS 0 abs1 main.obj
__Ldata 0 0 ABS 0 data main.obj
__Linit 0 0 CODE 0 init main.obj
__Lrbit 0 0 COMRAM 1 rbit main.obj
__Lrbss 0 0 COMRAM 1 rbss main.obj
__Ltemp 0 0 COMRAM 1 temp main.obj
__Ltext 0 0 ABS 0 text main.obj
__HcstackCOMRAM 0 0 ABS 0 cstackCOMRAM main.obj
__Hintret 0 0 ABS 0 intret main.obj
__Hirdata 0 0 CODE 0 irdata main.obj
__S0 3001 0 ABS 0 - main.obj
__S1 6 0 ABS 0 - main.obj
__S2 0 0 ABS 0 - main.obj
__HidataCOMRAM 0 0 ABS 0 idataCOMRAM main.obj
__Lbigdata 0 0 BIGRAM 1 bigdata main.obj
__Hnvrram 0 0 COMRAM 1 nvrram main.obj
__Lintentry 0 0 ABS 0 intentry main.obj
__Hramtop 600 0 RAM 0 ramtop main.obj
__Hrparam 0 0 COMRAM 1 rparam main.obj
__activetblptr 0 0 ABS 0 - main.obj
__Hstruct 0 0 COMRAM 1 struct main.obj
__end_of_read_digital_keypad 2FC6 0 CODE 0 text1 main.obj
__Lbigbss 0 0 BIGRAM 1 bigbss main.obj
__Lbigram 0 0 ABS 0 bigram main.obj
__Lcomram 0 0 ABS 0 comram main.obj
__Lconfig 0 0 CONFIG 0 config main.obj
__Lfarbss 0 0 FARRAM 0 farbss main.obj
__Lfardata 0 0 FARRAM 0 fardata main.obj
__end_of_init_config 2F80 0 CODE 0 text2 main.obj
stackhi 5FF 0 ABS 0 - startup.obj
stacklo 60 0 ABS 0 - startup.obj
__Lintcode 0 0 CODE 0 intcode main.obj
__Lintret 0 0 ABS 0 intret main.obj
__Lirdata 0 0 CODE 0 irdata main.obj
__Lspace_0 0 0 ABS 0 - main.obj
__Lspace_1 0 0 ABS 0 - main.obj
__Lspace_2 0 0 ABS 0 - main.obj
__Lend_init 0 0 CODE 0 end_init main.obj
__LcstackCOMRAM 0 0 ABS 0 cstackCOMRAM main.obj
end_of_initialization 2F92 0 CODE 0 cinit main.obj
__Lnvrram 0 0 COMRAM 1 nvrram main.obj
__Hintentry 0 0 ABS 0 intentry main.obj
__Hreset_vec 0 0 CODE 0 reset_vec main.obj
__Lramtop 600 0 RAM 0 ramtop main.obj
__Lrparam 0 0 COMRAM 1 rparam main.obj
__pcinit 2F80 0 CODE 0 cinit main.obj
__ptext0 2FC6 0 CODE 0 text0 main.obj
__ptext1 2F98 0 CODE 0 text1 main.obj
__ptext2 2F70 0 CODE 0 text2 main.obj
__Lstruct 0 0 COMRAM 1 struct main.obj
__ramtop 600 0 RAM 0 ramtop startup.obj
__Lpowerup 0 0 CODE 0 powerup main.obj
__Leeprom_data 0 0 EEDATA 0 eeprom_data main.obj
__Lreset_vec 0 0 CODE 0 reset_vec main.obj
___param_bank 10 0 ABS 0 - main.obj
__Hbigdata 0 0 BIGRAM 1 bigdata main.obj
__end_of__initialization 2F92 0 CODE 0 cinit main.obj
__Libigdata 0 0 CODE 0 ibigdata main.obj
__Lclrtext 0 0 ABS 0 clrtext main.obj
__pcstackCOMRAM 1 0 COMRAM 1 cstackCOMRAM main.obj
__Hend_init 4 0 CODE 0 end_init main.obj
__end_of_main 3000 0 CODE 0 text0 main.obj
_PORTB F81 0 ABS 0 - main.obj
_PORTC F82 0 ABS 0 - main.obj
_TRISB F93 0 ABS 0 - main.obj
_TRISC F94 0 ABS 0 - main.obj
__HRAM 0 0 ABS 0 - main.obj
__Hbss 0 0 RAM 1 bss main.obj
__Hram 0 0 ABS 0 ram main.obj
__Hsfr 0 0 ABS 0 sfr main.obj
__LRAM 1 0 ABS 0 - main.obj
__Lbss 0 0 RAM 1 bss main.obj
__Lram 0 0 ABS 0 ram main.obj
__Lsfr 0 0 ABS 0 sfr main.obj
__size_of_init_config 0 0 ABS 0 - main.obj
__initialization 2F80 0 CODE 0 cinit main.obj
__pdataCOMRAM 5 0 COMRAM 1 dataCOMRAM main.obj
__Hfardata 0 0 FARRAM 0 fardata main.obj
__Hsmallconst 0 0 SMALLCONST 0 smallconst main.obj
__Lifardata 0 0 CODE 0 ifardata main.obj
__Hintsave_regs 0 0 BIGRAM 1 intsave_regs main.obj
__Hintcode 0 0 CODE 0 intcode main.obj
# %SPLITSTAB Section
# This section enumerates all the psect splits performed by the assembler.
# The beginning of the section is indicated by %SPLITSTAB.
# Each line is a record a particular split, where the parent psect is on
# the left and the child on the right.  Note that a child psect is always
# split form the top of the parent psect. All splits from a given parent
# are listed in the order in which they occurred.
%SPLITSTAB
# %DABS Section
# This section contains a table of all usuage of the assember
# directive DABS in the program. Each line has the following format:
#   <name> <space> <address> <size>
# If the DABS was originally labelled then that shall be <name>,
# otherwise name will be "-".  The <space> number is in decimal.
# <address> and <size> are in byte units as unqaulified hexadecimal
%DABS
# %SEGMENTS Section
# This sections enumerates the segments of the program.  Each segment
# is described on a single line as follows:
#    <name> <space> <link address> <file address> <size> <delta>
# Addresses and size are in unqualified hexadecimal.  The link address
# and size are in units of delta. The file address is in units of bytes.
# All other numeric quantities are in decimal.
%SEGMENTS
cinit 0 2F80 2F80 18 1
text0 0 2FC6 2FC6 3B 1
text1 0 2F98 2F98 2E 1
text2 0 2F70 2F70 10 1
cstackCOMRAM 1 1 1 5 1
reset_vec 0 0 0 4 1



Microchip Technology PIC18 LITE Macro Assembler V1.36 build -262312587 
                                                                                               Fri Jun 16 02:35:23 2023

Microchip Technology Omniscient Code Generator v1.36 (Free mode) build 201601150325
     1                           	processor	18F4580
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    19                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    20  0000                     
    21                           	psect	idataCOMRAM
    22  0000'                    __pidataCOMRAM:
    23                           	opt stack 0
    24                           
    25                           ;initializer for read_switches@once
    26  0000' 01                 	db	1
    27  0000                     _PORTB	set	3969
    28  0000                     _PORTBbits	set	3969
    29  0000                     _PORTD	set	3971
    30  0000                     _TRISB	set	3987
    31  0000                     _TRISC	set	3988
    32  0000                     _TRISD	set	3989
    33  0000                     _RC0	set	31760
    34  0000                     _RC1	set	31761
    35  0000                     _RC2	set	31762
    36  0000                     _RD7	set	31775
    37                           
    38                           	psect	smallconst
    39  0000'                    __psmallconst:
    40                           	opt stack 0
    41  0000' 00                 	db	0
    42  0001'                    STR_4:
    43  0001' 61                 	db	97	;'a'
    44  0002' 74                 	db	116	;'t'
    45  0003' 74                 	db	116	;'t'
    46  0004' 65                 	db	101	;'e'
    47  0005' 6D                 	db	109	;'m'
    48  0006' 70                 	db	112	;'p'
    49  0007' 73                 	db	115	;'s'
    50  0008' 20                 	db	32
    51  0009' 6C                 	db	108	;'l'
    52  000A' 65                 	db	101	;'e'
    53  000B' 66                 	db	102	;'f'
    54  000C' 74                 	db	116	;'t'
    55  000D' 3A                 	db	58	;':'
    56  000E' 31                 	db	49	;'1'
    57  000F' 00                 	db	0
    58  0010'                    STR_3:
    59  0010' 61                 	db	97	;'a'
    60  0011' 74                 	db	116	;'t'
    61  0012' 74                 	db	116	;'t'
    62  0013' 65                 	db	101	;'e'
    63  0014' 6D                 	db	109	;'m'
    64  0015' 70                 	db	112	;'p'
    65  0016' 73                 	db	115	;'s'
    66  0017' 20                 	db	32
    67  0018' 6C                 	db	108	;'l'
    68  0019' 65                 	db	101	;'e'
    69  001A' 66                 	db	102	;'f'
    70  001B' 74                 	db	116	;'t'
    71  001C' 3A                 	db	58	;':'
    72  001D' 32                 	db	50	;'2'
    73  001E' 00                 	db	0
    74  001F'                    STR_1:
    75  001F' 45                 	db	69	;'E'
    76  0020' 6E                 	db	110	;'n'
    77  0021' 74                 	db	116	;'t'
    78  0022' 65                 	db	101	;'e'
    79  0023' 72                 	db	114	;'r'
    80  0024' 20                 	db	32
    81  0025' 50                 	db	80	;'P'
    82  0026' 61                 	db	97	;'a'
    83  0027' 73                 	db	115	;'s'
    84  0028' 73                 	db	115	;'s'
    85  0029' 77                 	db	119	;'w'
    86  002A' 6F                 	db	111	;'o'
    87  002B' 72                 	db	114	;'r'
    88  002C' 64                 	db	100	;'d'
    89  002D' 00                 	db	0
    90  002E'                    STR_2:
    91  002E' 53                 	db	83	;'S'
    92  002F' 75                 	db	117	;'u'
    93  0030' 63                 	db	99	;'c'
    94  0031' 63                 	db	99	;'c'
    95  0032' 65                 	db	101	;'e'
    96  0033' 73                 	db	115	;'s'
    97  0034' 73                 	db	115	;'s'
    98  0035' 66                 	db	102	;'f'
    99  0036' 75                 	db	117	;'u'
   100  0037' 6C                 	db	108	;'l'
   101  0038' 6C                 	db	108	;'l'
   102  0039' 00                 	db	0
   103  003A'                    STR_5:
   104  003A' 46                 	db	70	;'F'
   105  003B' 41                 	db	65	;'A'
   106  003C' 49                 	db	73	;'I'
   107  003D' 4C                 	db	76	;'L'
   108  003E' 45                 	db	69	;'E'
   109  003F' 44                 	db	68	;'D'
   110  0040' 00                 	db	0
   111  0041' 00                 	db	0	; dummy byte at the end
   112  0000                     
   113                           ; #config settings
   114                           
   115                           	psect	cinit
   116  0000'                    __pcinit:
   117                           	opt stack 0
   118  0000'                    start_initialization:
   119                           	opt stack 0
   120  0000'                    __initialization:
   121                           	opt stack 0
   122                           
   123                           ; Clear objects allocated to COMRAM (19 bytes)
   124  0000' EE00' F000'        	lfsr	0,__pbssCOMRAM
   125  0004' 0E13               	movlw	19
   126  0006'                    clear_0:
   127  0006' 6AEE               	clrf	postinc0,c
   128  0008' 06E8               	decf	wreg,f,c
   129  000A' E1FD               	bnz	clear_0
   130                           
   131                           ; Initialize objects allocated to COMRAM (1 bytes)
   132                           ; load TBLPTR registers with __pidataCOMRAM
   133  000C' 0E00'              	movlw	low __pidataCOMRAM
   134  000E' 6EF6               	movwf	tblptrl,c
   135  0010' 0E00'              	movlw	high __pidataCOMRAM
   136  0012' 6EF7               	movwf	tblptrh,c
   137  0014' 0E00'              	movlw	low (__pidataCOMRAM shr (0+16))
   138  0016' 6EF8               	movwf	tblptru,c
   139  0018' 0009               	tblrd		*+	;fetch initializer
   140  001A' CFF5 F000'         	movff	tablat,__pdataCOMRAM
   141  001E'                    end_of_initialization:
   142                           	opt stack 0
   143  001E'                    __end_of__initialization:
   144                           	opt stack 0
   145  001E' 0E00'              	movlw	low (__Lsmallconst shr (0+16))
   146  0020' 6EF8               	movwf	tblptru,c
   147  0022' 0E00'              	movlw	high __Lsmallconst
   148  0024' 6EF7               	movwf	tblptrh,c
   149  0026' 0100               	movlb	0
   150  0028' EF00' F000'        	goto	_main	;jump to C main() function
   151                           tblptru	equ	0xFF8
   152                           tblptrh	equ	0xFF7
   153                           tblptrl	equ	0xFF6
   154                           tablat	equ	0xFF5
   155                           postinc0	equ	0xFEE
   156                           wreg	equ	0xFE8
   157                           
   158                           	psect	bssCOMRAM
   159  0000'                    __pbssCOMRAM:
   160                           	opt stack 0
   161  0000'                    _passw:
   162                           	opt stack 0
   163  0000'                    	ds	9
   164  0009'                    _pre_passw:
   165                           	opt stack 0
   166  0009'                    	ds	9
   167  0012'                    read_switches@key:
   168                           	opt stack 0
   169  0012'                    	ds	1
   170                           tblptru	equ	0xFF8
   171                           tblptrh	equ	0xFF7
   172                           tblptrl	equ	0xFF6
   173                           tablat	equ	0xFF5
   174                           postinc0	equ	0xFEE
   175                           wreg	equ	0xFE8
   176                           
   177                           	psect	dataCOMRAM
   178  0000'                    __pdataCOMRAM:
   179                           	opt stack 0
   180  0000'                    read_switches@once:
   181                           	opt stack 0
   182  0000'                    	ds	1
   183                           tblptru	equ	0xFF8
   184                           tblptrh	equ	0xFF7
   185                           tblptrl	equ	0xFF6
   186                           tablat	equ	0xFF5
   187                           postinc0	equ	0xFEE
   188                           wreg	equ	0xFE8
   189                           
   190                           	psect	cstackCOMRAM
   191  0000'                    __pcstackCOMRAM:
   192                           	opt stack 0
   193  0000'                    _clcd_putch$1:
   194                           	opt stack 0
   195  0000'                    clcd_write@control_bit:
   196                           	opt stack 0
   197  0000'                    read_switches@detection_type:
   198                           	opt stack 0
   199                           
   200                           ; 1 bytes @ 0x0
   201  0000'                    	ds	1
   202  0001'                    clcd_write@byte:
   203                           	opt stack 0
   204  0001'                    check_matrix_keypad@i:
   205                           	opt stack 0
   206                           
   207                           ; 2 bytes @ 0x1
   208  0001'                    	ds	1
   209  0002'                    clcd_print@data:
   210                           	opt stack 0
   211                           
   212                           ; 2 bytes @ 0x2
   213  0002'                    	ds	1
   214  0003'                    check_matrix_keypad@key:
   215                           	opt stack 0
   216                           
   217                           ; 1 bytes @ 0x3
   218  0003'                    	ds	1
   219  0004'                    clcd_print@addr:
   220                           	opt stack 0
   221  0004'                    check_matrix_keypad@i_158:
   222                           	opt stack 0
   223                           
   224                           ; 2 bytes @ 0x4
   225  0004'                    	ds	1
   226  0005'                    
   227                           ; 1 bytes @ 0x5
   228  0005'                    	ds	1
   229  0006'                    ??_main:
   230                           
   231                           ; 1 bytes @ 0x6
   232  0006'                    	ds	4
   233  000A'                    main@delay_145:
   234                           	opt stack 0
   235                           
   236                           ; 4 bytes @ 0xA
   237  000A'                    	ds	4
   238  000E'                    main@flag:
   239                           	opt stack 0
   240                           
   241                           ; 1 bytes @ 0xE
   242  000E'                    	ds	1
   243  000F'                    main@delay:
   244                           	opt stack 0
   245                           
   246                           ; 4 bytes @ 0xF
   247  000F'                    	ds	4
   248  0013'                    main@chance:
   249                           	opt stack 0
   250                           
   251                           ; 2 bytes @ 0x13
   252  0013'                    	ds	2
   253  0015'                    main@i:
   254                           	opt stack 0
   255                           
   256                           ; 2 bytes @ 0x15
   257  0015'                    	ds	2
   258                           tblptru	equ	0xFF8
   259                           tblptrh	equ	0xFF7
   260                           tblptrl	equ	0xFF6
   261                           tablat	equ	0xFF5
   262                           postinc0	equ	0xFEE
   263                           wreg	equ	0xFE8
   264                           
   265 ;;
   266 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   267 ;;
   268 ;; *************** function _main *****************
   269 ;; Defined at:
   270 ;;		line 11 in file "main.c"
   271 ;; Parameters:    Size  Location     Type
   272 ;;		None
   273 ;; Auto vars:     Size  Location     Type
   274 ;;  delay           4   10[COMRAM] unsigned long 
   275 ;;  i               2   21[COMRAM] int 
   276 ;;  flag            1   14[COMRAM] unsigned char 
   277 ;;  delay           4   15[COMRAM] long 
   278 ;;  chance          2   19[COMRAM] int 
   279 ;; Return value:  Size  Location     Type
   280 ;;                  1    wreg      void 
   281 ;; Registers used:
   282 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, structret, tblptrl, tblptrh, tblp
      +tru, prodl, prodh, bsr, cstack
   283 ;; Tracked objects:
   284 ;;		On entry : 0/0
   285 ;;		On exit  : 0/0
   286 ;;		Unchanged: 0/0
   287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   288 ;;      Params:         0       0       0       0       0       0       0
   289 ;;      Locals:        13       0       0       0       0       0       0
   290 ;;      Temps:          4       0       0       0       0       0       0
   291 ;;      Totals:        17       0       0       0       0       0       0
   292 ;;Total ram usage:       17 bytes
   293 ;; Hardware stack levels required when called:    3
   294 ;; This function calls:
   295 ;;		_check_matrix_keypad
   296 ;;		_clcd_print
   297 ;;		_clcd_putch
   298 ;;		_init_config
   299 ;; This function is called by:
   300 ;;		Startup code after reset
   301 ;; This function uses a non-reentrant model
   302 ;;
   303                           
   304                           	psect	text0
   305  0000'                    __ptext0:
   306                           	opt stack 0
   307  0000'                    _main:
   308                           	opt stack 28
   309                           
   310                           ;main.c: 14: init_config();
   311                           
   312                           ;incstack = 0
   313  0000' EC00' F000'        	call	_init_config	;wreg free
   314                           
   315                           ;main.c: 15: int chance=3;
   316  0004' 0E00               	movlw	0
   317  0006' 6E14'              	movwf	main@chance+1,c
   318  0008' 0E03               	movlw	3
   319  000A' 6E13'              	movwf	main@chance,c
   320                           
   321                           ;main.c: 16: long int delay=0;
   322  000C' 0E00               	movlw	0
   323  000E' 6E0F'              	movwf	main@delay,c
   324  0010' 0E00               	movlw	0
   325  0012' 6E10'              	movwf	main@delay+1,c
   326  0014' 0E00               	movlw	0
   327  0016' 6E11'              	movwf	main@delay+2,c
   328  0018' 0E00               	movlw	0
   329  001A' 6E12'              	movwf	main@delay+3,c
   330                           
   331                           ;main.c: 17: clcd_print("Enter Password",(0x80 + (0)));
   332  001C' 0E00'              	movlw	low STR_1
   333  001E' 6E02'              	movwf	clcd_print@data,c
   334  0020' 0E00'              	movlw	high STR_1
   335  0022' 6E03'              	movwf	clcd_print@data+1,c
   336  0024' 0E80               	movlw	128
   337  0026' 6E04'              	movwf	clcd_print@addr,c
   338  0028' EC00' F000'        	call	_clcd_print	;wreg free
   339  002C'                    l987:
   340                           
   341                           ;main.c: 19: {
   342                           ;main.c: 21: if(delay++<25000)
   343  002C' C00F' F006'        	movff	main@delay,??_main
   344  0030' C010' F007'        	movff	main@delay+1,??_main+1
   345  0034' C011' F008'        	movff	main@delay+2,??_main+2
   346  0038' C012' F009'        	movff	main@delay+3,??_main+3
   347  003C' 2A0F'              	incf	main@delay,f,c
   348  003E' 0E00               	movlw	0
   349  0040' 2210'              	addwfc	main@delay+1,f,c
   350  0042' 2211'              	addwfc	main@delay+2,f,c
   351  0044' 2212'              	addwfc	main@delay+3,f,c
   352  0046' BE09'              	btfsc	??_main+3,7,c
   353  0048' D009               	goto	l989
   354  004A' 5009'              	movf	??_main+3,w,c
   355  004C' 1008'              	iorwf	??_main+2,w,c
   356  004E' E10C               	bnz	l991
   357  0050' 0EA8               	movlw	168
   358  0052' 5C06'              	subwf	??_main,w,c
   359  0054' 0E61               	movlw	97
   360  0056' 5807'              	subwfb	??_main+1,w,c
   361  0058' B0D8               	btfsc	status,0,c
   362  005A' D006               	goto	l991
   363  005C'                    l989:
   364                           
   365                           ;main.c: 22: {
   366                           ;main.c: 23: clcd_putch('_',(0xC0 + (0)));
   367  005C' 0EC0               	movlw	192
   368  005E' 6E00'              	movwf	_clcd_putch$1,c
   369  0060' 0E5F               	movlw	95
   370  0062' EC00' F000'        	call	_clcd_putch
   371                           
   372                           ;main.c: 25: }
   373  0066' D016               	goto	l43
   374  0068'                    l991:
   375                           
   376                           ;main.c: 26: else if(delay <50000)
   377  0068' BE12'              	btfsc	main@delay+3,7,c
   378  006A' D009               	goto	l993
   379  006C' 5012'              	movf	main@delay+3,w,c
   380  006E' 1011'              	iorwf	main@delay+2,w,c
   381  0070' E109               	bnz	l995
   382  0072' 0E50               	movlw	80
   383  0074' 5C0F'              	subwf	main@delay,w,c
   384  0076' 0EC3               	movlw	195
   385  0078' 5810'              	subwfb	main@delay+1,w,c
   386  007A' B0D8               	btfsc	status,0,c
   387  007C' D003               	goto	l995
   388  007E'                    l993:
   389                           
   390                           ;main.c: 27: {
   391                           ;main.c: 28: check_matrix_keypad();
   392  007E' EC00' F000'        	call	_check_matrix_keypad	;wreg free
   393                           
   394                           ;main.c: 29: }
   395  0082' D008               	goto	l43
   396  0084'                    l995:
   397                           
   398                           ;main.c: 30: else
   399                           ;main.c: 31: {
   400                           ;main.c: 32: delay=0;
   401  0084' 0E00               	movlw	0
   402  0086' 6E0F'              	movwf	main@delay,c
   403  0088' 0E00               	movlw	0
   404  008A' 6E10'              	movwf	main@delay+1,c
   405  008C' 0E00               	movlw	0
   406  008E' 6E11'              	movwf	main@delay+2,c
   407  0090' 0E00               	movlw	0
   408  0092' 6E12'              	movwf	main@delay+3,c
   409  0094'                    l43:
   410                           
   411                           ;main.c: 33: }
   412                           ;main.c: 34: char flag=1;
   413  0094' 0E01               	movlw	1
   414  0096' 6E0E'              	movwf	main@flag,c
   415                           
   416                           ;main.c: 35: for(int i=0;pre_passw[i]!='\0';i++)
   417  0098' 0E00               	movlw	0
   418  009A' 6E16'              	movwf	main@i+1,c
   419  009C' 0E00               	movlw	0
   420  009E' 6E15'              	movwf	main@i,c
   421  00A0' D014               	goto	l1003
   422  00A2'                    l997:
   423                           
   424                           ;main.c: 36: {
   425                           ;main.c: 37: if(passw[i]!=pre_passw[i])
   426  00A2' 0E00'              	movlw	low _pre_passw
   427  00A4' 2415'              	addwf	main@i,w,c
   428  00A6' 6ED9               	movwf	fsr2l,c
   429  00A8' 0E00'              	movlw	high _pre_passw
   430  00AA' 2016'              	addwfc	main@i+1,w,c
   431  00AC' 6EDA               	movwf	fsr2h,c
   432  00AE' 0E00'              	movlw	low _passw
   433  00B0' 2415'              	addwf	main@i,w,c
   434  00B2' 6EE1               	movwf	fsr1l,c
   435  00B4' 0E00'              	movlw	high _passw
   436  00B6' 2016'              	addwfc	main@i+1,w,c
   437  00B8' 6EE2               	movwf	fsr1h,c
   438  00BA' 50DE               	movf	postinc2,w,c
   439  00BC' 18E6               	xorwf	postinc1,w,c
   440  00BE' B4D8               	btfsc	status,2,c
   441  00C0' D002               	goto	l1001
   442                           
   443                           ;main.c: 38: {
   444                           ;main.c: 39: flag=0;
   445  00C2' 0E00               	movlw	0
   446  00C4' 6E0E'              	movwf	main@flag,c
   447  00C6'                    l1001:
   448  00C6' 4A15'              	infsnz	main@i,f,c
   449  00C8' 2A16'              	incf	main@i+1,f,c
   450  00CA'                    l1003:
   451  00CA' 0E00'              	movlw	low _pre_passw
   452  00CC' 2415'              	addwf	main@i,w,c
   453  00CE' 6ED9               	movwf	fsr2l,c
   454  00D0' 0E00'              	movlw	high _pre_passw
   455  00D2' 2016'              	addwfc	main@i+1,w,c
   456  00D4' 6EDA               	movwf	fsr2h,c
   457  00D6' 50DF               	movf	indf2,w,c
   458  00D8' A4D8               	btfss	status,2,c
   459  00DA' D7E3               	goto	l997
   460                           
   461                           ;main.c: 40: }
   462                           ;main.c: 43: }
   463                           ;main.c: 44: if(flag)
   464  00DC' 500E'              	movf	main@flag,w,c
   465  00DE' B4D8               	btfsc	status,2,c
   466  00E0' D009               	goto	l1009
   467                           
   468                           ;main.c: 45: {
   469                           ;main.c: 46: clcd_print("Successfull",(0xC0 + (0)));
   470  00E2' 0E00'              	movlw	low STR_2
   471  00E4' 6E02'              	movwf	clcd_print@data,c
   472  00E6' 0E00'              	movlw	high STR_2
   473  00E8' 6E03'              	movwf	clcd_print@data+1,c
   474  00EA' 0EC0               	movlw	192
   475  00EC' 6E04'              	movwf	clcd_print@addr,c
   476  00EE' EC00' F000'        	call	_clcd_print	;wreg free
   477                           
   478                           ;main.c: 48: }
   479  00F2' D79C               	goto	l987
   480  00F4'                    l1009:
   481                           
   482                           ;main.c: 49: else
   483                           ;main.c: 50: {
   484                           ;main.c: 51: unsigned long int delay=0;
   485  00F4' 0E00               	movlw	0
   486  00F6' 6E0A'              	movwf	main@delay_145,c
   487  00F8' 0E00               	movlw	0
   488  00FA' 6E0B'              	movwf	main@delay_145+1,c
   489  00FC' 0E00               	movlw	0
   490  00FE' 6E0C'              	movwf	main@delay_145+2,c
   491  0100' 0E00               	movlw	0
   492  0102' 6E0D'              	movwf	main@delay_145+3,c
   493                           
   494                           ;main.c: 52: chance--;
   495  0104' 0613'              	decf	main@chance,f,c
   496  0106' A0D8               	btfss	status,0,c
   497  0108' 0614'              	decf	main@chance+1,f,c
   498                           
   499                           ;main.c: 53: if(chance==2)
   500  010A' 0E02               	movlw	2
   501  010C' 1813'              	xorwf	main@chance,w,c
   502  010E' 1014'              	iorwf	main@chance+1,w,c
   503  0110' A4D8               	btfss	status,2,c
   504  0112' D009               	goto	l1017
   505                           
   506                           ;main.c: 54: {
   507                           ;main.c: 55: clcd_print("attemps left:2",(0xC0 + (0)));
   508  0114' 0E00'              	movlw	low STR_3
   509  0116' 6E02'              	movwf	clcd_print@data,c
   510  0118' 0E00'              	movlw	high STR_3
   511  011A' 6E03'              	movwf	clcd_print@data+1,c
   512  011C' 0EC0               	movlw	192
   513  011E' 6E04'              	movwf	clcd_print@addr,c
   514  0120' EC00' F000'        	call	_clcd_print	;wreg free
   515                           
   516                           ;main.c: 57: }
   517  0124' D783               	goto	l987
   518  0126'                    l1017:
   519                           
   520                           ;main.c: 58: else if (chance ==1)
   521  0126' 0413'              	decf	main@chance,w,c
   522  0128' 1014'              	iorwf	main@chance+1,w,c
   523  012A' A4D8               	btfss	status,2,c
   524  012C' D009               	goto	l1021
   525                           
   526                           ;main.c: 59: {
   527                           ;main.c: 60: clcd_print("attemps left:1",(0xC0 + (0)));
   528  012E' 0E00'              	movlw	low STR_4
   529  0130' 6E02'              	movwf	clcd_print@data,c
   530  0132' 0E00'              	movlw	high STR_4
   531  0134' 6E03'              	movwf	clcd_print@data+1,c
   532  0136' 0EC0               	movlw	192
   533  0138' 6E04'              	movwf	clcd_print@addr,c
   534  013A' EC00' F000'        	call	_clcd_print	;wreg free
   535                           
   536                           ;main.c: 61: }
   537  013E' D776               	goto	l987
   538  0140'                    l1021:
   539                           
   540                           ;main.c: 62: else
   541                           ;main.c: 63: {
   542                           ;main.c: 64: clcd_print("FAILED",(0xC0 + (0)));
   543  0140' 0E00'              	movlw	low STR_5
   544  0142' 6E02'              	movwf	clcd_print@data,c
   545  0144' 0E00'              	movlw	high STR_5
   546  0146' 6E03'              	movwf	clcd_print@data+1,c
   547  0148' 0EC0               	movlw	192
   548  014A' 6E04'              	movwf	clcd_print@addr,c
   549  014C' EC00' F000'        	call	_clcd_print	;wreg free
   550  0150' D76D               	goto	l987
   551  0152'                    __end_of_main:
   552                           	opt stack 0
   553                           tblptru	equ	0xFF8
   554                           tblptrh	equ	0xFF7
   555                           tblptrl	equ	0xFF6
   556                           tablat	equ	0xFF5
   557                           postinc0	equ	0xFEE
   558                           wreg	equ	0xFE8
   559                           postinc1	equ	0xFE6
   560                           fsr1h	equ	0xFE2
   561                           fsr1l	equ	0xFE1
   562                           indf2	equ	0xFDF
   563                           postinc2	equ	0xFDE
   564                           fsr2h	equ	0xFDA
   565                           fsr2l	equ	0xFD9
   566                           status	equ	0xFD8
   567                           
   568 ;; *************** function _init_config *****************
   569 ;; Defined at:
   570 ;;		line 222 in file "main.c"
   571 ;; Parameters:    Size  Location     Type
   572 ;;		None
   573 ;; Auto vars:     Size  Location     Type
   574 ;;		None
   575 ;; Return value:  Size  Location     Type
   576 ;;                  1    wreg      void 
   577 ;; Registers used:
   578 ;;		wreg, status,2, status,0, cstack
   579 ;; Tracked objects:
   580 ;;		On entry : 0/0
   581 ;;		On exit  : 0/0
   582 ;;		Unchanged: 0/0
   583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   584 ;;      Params:         0       0       0       0       0       0       0
   585 ;;      Locals:         0       0       0       0       0       0       0
   586 ;;      Temps:          0       0       0       0       0       0       0
   587 ;;      Totals:         0       0       0       0       0       0       0
   588 ;;Total ram usage:        0 bytes
   589 ;; Hardware stack levels used:    1
   590 ;; Hardware stack levels required when called:    1
   591 ;; This function calls:
   592 ;;		_clcd_write
   593 ;; This function is called by:
   594 ;;		_main
   595 ;; This function uses a non-reentrant model
   596 ;;
   597                           
   598                           	psect	text1
   599  0000'                    __ptext1:
   600                           	opt stack 0
   601  0000'                    _init_config:
   602                           	opt stack 29
   603                           
   604                           ;main.c: 224: TRISB=0X00;
   605                           
   606                           ;incstack = 0
   607  0000' 0E00               	movlw	0
   608  0002' 6E93               	movwf	3987,c	;volatile
   609                           
   610                           ;main.c: 225: PORTB=0X00;
   611  0004' 0E00               	movlw	0
   612  0006' 6E81               	movwf	3969,c	;volatile
   613                           
   614                           ;main.c: 228: TRISD = 0x00;
   615  0008' 0E00               	movlw	0
   616  000A' 6E95               	movwf	3989,c	;volatile
   617                           
   618                           ;main.c: 230: TRISC = TRISC & 0xF8;
   619  000C' 5094               	movf	3988,w,c	;volatile
   620  000E' 0BF8               	andlw	248
   621  0010' 6E94               	movwf	3988,c	;volatile
   622                           
   623                           ;main.c: 232: RC0 = 0;
   624  0012' 9082               	bcf	3970,0,c	;volatile
   625                           
   626                           ;main.c: 234: clcd_write(0x02, 0);
   627  0014' 0E00               	movlw	0
   628  0016' 6E00'              	movwf	clcd_write@control_bit,c
   629  0018' 0E02               	movlw	2
   630  001A' EC00' F000'        	call	_clcd_write
   631                           
   632                           ;main.c: 235: clcd_write(0x38, 0);
   633  001E' 0E00               	movlw	0
   634  0020' 6E00'              	movwf	clcd_write@control_bit,c
   635  0022' 0E38               	movlw	56
   636  0024' EC00' F000'        	call	_clcd_write
   637                           
   638                           ;main.c: 236: clcd_write(0x0C, 0);
   639  0028' 0E00               	movlw	0
   640  002A' 6E00'              	movwf	clcd_write@control_bit,c
   641  002C' 0E0C               	movlw	12
   642  002E' EC00' F000'        	call	_clcd_write
   643                           
   644                           ;main.c: 237: clcd_write(0x01, 0);
   645  0032' 0E00               	movlw	0
   646  0034' 6E00'              	movwf	clcd_write@control_bit,c
   647  0036' 0E01               	movlw	1
   648  0038' EC00' F000'        	call	_clcd_write
   649  003C' 0012               	return		;funcret
   650  003E'                    __end_of_init_config:
   651                           	opt stack 0
   652                           tblptru	equ	0xFF8
   653                           tblptrh	equ	0xFF7
   654                           tblptrl	equ	0xFF6
   655                           tablat	equ	0xFF5
   656                           postinc0	equ	0xFEE
   657                           wreg	equ	0xFE8
   658                           postinc1	equ	0xFE6
   659                           fsr1h	equ	0xFE2
   660                           fsr1l	equ	0xFE1
   661                           indf2	equ	0xFDF
   662                           postinc2	equ	0xFDE
   663                           fsr2h	equ	0xFDA
   664                           fsr2l	equ	0xFD9
   665                           status	equ	0xFD8
   666                           
   667 ;; *************** function _clcd_print *****************
   668 ;; Defined at:
   669 ;;		line 77 in file "main.c"
   670 ;; Parameters:    Size  Location     Type
   671 ;;  data            2    2[COMRAM] PTR const unsigned char 
   672 ;;		 -> STR_5(7), STR_4(15), STR_3(15), STR_2(12), 
   673 ;;		 -> STR_1(15), 
   674 ;;  addr            1    4[COMRAM] unsigned char 
   675 ;; Auto vars:     Size  Location     Type
   676 ;;		None
   677 ;; Return value:  Size  Location     Type
   678 ;;                  1    wreg      void 
   679 ;; Registers used:
   680 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   681 ;; Tracked objects:
   682 ;;		On entry : 0/0
   683 ;;		On exit  : 0/0
   684 ;;		Unchanged: 0/0
   685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   686 ;;      Params:         3       0       0       0       0       0       0
   687 ;;      Locals:         0       0       0       0       0       0       0
   688 ;;      Temps:          0       0       0       0       0       0       0
   689 ;;      Totals:         3       0       0       0       0       0       0
   690 ;;Total ram usage:        3 bytes
   691 ;; Hardware stack levels used:    1
   692 ;; Hardware stack levels required when called:    1
   693 ;; This function calls:
   694 ;;		_clcd_write
   695 ;; This function is called by:
   696 ;;		_main
   697 ;; This function uses a non-reentrant model
   698 ;;
   699                           
   700                           	psect	text2
   701  0000'                    __ptext2:
   702                           	opt stack 0
   703  0000'                    _clcd_print:
   704                           	opt stack 29
   705                           
   706                           ;main.c: 79: clcd_write(addr, 0);
   707                           
   708                           ;incstack = 0
   709  0000' 0E00               	movlw	0
   710  0002' 6E00'              	movwf	clcd_write@control_bit,c
   711  0004' 5004'              	movf	clcd_print@addr,w,c
   712  0006' EC00' F000'        	call	_clcd_write
   713                           
   714                           ;main.c: 80: while (*data != '\0')
   715  000A' D00C               	goto	l955
   716  000C'                    l951:
   717                           
   718                           ;main.c: 81: {
   719                           ;main.c: 82: clcd_write(*data++, 1);
   720  000C' 0E01               	movlw	1
   721  000E' 6E00'              	movwf	clcd_write@control_bit,c
   722  0010' C002' FFF6         	movff	clcd_print@data,tblptrl
   723  0014' C003' FFF7         	movff	clcd_print@data+1,tblptrh
   724  0018'                    	if	0	;tblptru may be non-zero
   725  0018'                    	endif
   726  0018'                    	if	0	;tblptru may be non-zero
   727  0018'                    	endif
   728  0018' 0008               	tblrd		*
   729  001A' 50F5               	movf	tablat,w,c
   730  001C' EC00' F000'        	call	_clcd_write
   731  0020' 4A02'              	infsnz	clcd_print@data,f,c
   732  0022' 2A03'              	incf	clcd_print@data+1,f,c
   733  0024'                    l955:
   734  0024' C002' FFF6         	movff	clcd_print@data,tblptrl
   735  0028' C003' FFF7         	movff	clcd_print@data+1,tblptrh
   736  002C'                    	if	0	;tblptru may be non-zero
   737  002C'                    	endif
   738  002C'                    	if	0	;tblptru may be non-zero
   739  002C'                    	endif
   740  002C' 0008               	tblrd		*
   741  002E' 50F5               	movf	tablat,w,c
   742  0030' 0900               	iorlw	0
   743  0032' B4D8               	btfsc	status,2,c
   744  0034' 0012               	return	
   745  0036' D7EA               	goto	l951
   746  0038'                    __end_of_clcd_print:
   747                           	opt stack 0
   748                           tblptru	equ	0xFF8
   749                           tblptrh	equ	0xFF7
   750                           tblptrl	equ	0xFF6
   751                           tablat	equ	0xFF5
   752                           postinc0	equ	0xFEE
   753                           wreg	equ	0xFE8
   754                           postinc1	equ	0xFE6
   755                           fsr1h	equ	0xFE2
   756                           fsr1l	equ	0xFE1
   757                           indf2	equ	0xFDF
   758                           postinc2	equ	0xFDE
   759                           fsr2h	equ	0xFDA
   760                           fsr2l	equ	0xFD9
   761                           status	equ	0xFD8
   762                           
   763 ;; *************** function _clcd_write *****************
   764 ;; Defined at:
   765 ;;		line 86 in file "main.c"
   766 ;; Parameters:    Size  Location     Type
   767 ;;  byte            1    wreg     unsigned char 
   768 ;;  control_bit     1    0[COMRAM] unsigned char 
   769 ;; Auto vars:     Size  Location     Type
   770 ;;  byte            1    1[COMRAM] unsigned char 
   771 ;; Return value:  Size  Location     Type
   772 ;;                  1    wreg      void 
   773 ;; Registers used:
   774 ;;		wreg, status,2
   775 ;; Tracked objects:
   776 ;;		On entry : 0/0
   777 ;;		On exit  : 0/0
   778 ;;		Unchanged: 0/0
   779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   780 ;;      Params:         1       0       0       0       0       0       0
   781 ;;      Locals:         1       0       0       0       0       0       0
   782 ;;      Temps:          0       0       0       0       0       0       0
   783 ;;      Totals:         2       0       0       0       0       0       0
   784 ;;Total ram usage:        2 bytes
   785 ;; Hardware stack levels used:    1
   786 ;; This function calls:
   787 ;;		Nothing
   788 ;; This function is called by:
   789 ;;		_clcd_print
   790 ;;		_init_config
   791 ;; This function uses a non-reentrant model
   792 ;;
   793                           
   794                           	psect	text3
   795  0000'                    __ptext3:
   796                           	opt stack 0
   797  0000'                    _clcd_write:
   798                           	opt stack 29
   799                           
   800                           ;incstack = 0
   801                           ;clcd_write@byte stored from wreg
   802  0000' 6E01'              	movwf	clcd_write@byte,c
   803                           
   804                           ;main.c: 88: PORTD = control_bit;
   805  0002' C000' FF83         	movff	clcd_write@control_bit,3971	;volatile
   806                           
   807                           ;main.c: 89: PORTD = byte;
   808  0006' C001' FF83         	movff	clcd_write@byte,3971	;volatile
   809                           
   810                           ;main.c: 92: RC2 = 1;
   811  000A' 8482               	bsf	3970,2,c	;volatile
   812                           
   813                           ;main.c: 93: RC2 = 0;
   814  000C' 9482               	bcf	3970,2,c	;volatile
   815                           
   816                           ;main.c: 95: TRISD = 0XFF;
   817  000E' 6895               	setf	3989,c	;volatile
   818                           
   819                           ;main.c: 96: RC0 = 1;
   820  0010' 8082               	bsf	3970,0,c	;volatile
   821                           
   822                           ;main.c: 97: RC1 = 0;
   823  0012' 9282               	bcf	3970,1,c	;volatile
   824  0014'                    l927:
   825                           
   826                           ;main.c: 100: {
   827                           ;main.c: 101: RC2 = 1;
   828  0014' 8482               	bsf	3970,2,c	;volatile
   829                           
   830                           ;main.c: 102: RC2 = 0;
   831  0016' 9482               	bcf	3970,2,c	;volatile
   832                           
   833                           ;main.c: 103: } while (RD7);
   834  0018' BE83               	btfsc	3971,7,c	;volatile
   835  001A' D7FC               	goto	l927
   836                           
   837                           ;main.c: 105: RC0 = 0;
   838  001C' 9082               	bcf	3970,0,c	;volatile
   839                           
   840                           ;main.c: 106: TRISD = 0X00;
   841  001E' 0E00               	movlw	0
   842  0020' 6E95               	movwf	3989,c	;volatile
   843  0022' 0012               	return		;funcret
   844  0024'                    __end_of_clcd_write:
   845                           	opt stack 0
   846                           tblptru	equ	0xFF8
   847                           tblptrh	equ	0xFF7
   848                           tblptrl	equ	0xFF6
   849                           tablat	equ	0xFF5
   850                           postinc0	equ	0xFEE
   851                           wreg	equ	0xFE8
   852                           postinc1	equ	0xFE6
   853                           fsr1h	equ	0xFE2
   854                           fsr1l	equ	0xFE1
   855                           indf2	equ	0xFDF
   856                           postinc2	equ	0xFDE
   857                           fsr2h	equ	0xFDA
   858                           fsr2l	equ	0xFD9
   859                           status	equ	0xFD8
   860                           
   861 ;; *************** function _check_matrix_keypad *****************
   862 ;; Defined at:
   863 ;;		line 108 in file "main.c"
   864 ;; Parameters:    Size  Location     Type
   865 ;;		None
   866 ;; Auto vars:     Size  Location     Type
   867 ;;  i               2    4[COMRAM] int 
   868 ;;  i               2    1[COMRAM] unsigned int 
   869 ;;  key             1    3[COMRAM] unsigned char 
   870 ;; Return value:  Size  Location     Type
   871 ;;                  1    wreg      void 
   872 ;; Registers used:
   873 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, structret, tblptrl, tblptrh, tblp
      +tru, prodl, prodh, bsr, cstack
   874 ;; Tracked objects:
   875 ;;		On entry : 0/0
   876 ;;		On exit  : 0/0
   877 ;;		Unchanged: 0/0
   878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   879 ;;      Params:         0       0       0       0       0       0       0
   880 ;;      Locals:         5       0       0       0       0       0       0
   881 ;;      Temps:          0       0       0       0       0       0       0
   882 ;;      Totals:         5       0       0       0       0       0       0
   883 ;;Total ram usage:        5 bytes
   884 ;; Hardware stack levels used:    1
   885 ;; Hardware stack levels required when called:    2
   886 ;; This function calls:
   887 ;;		_clcd_putch
   888 ;;		_read_switches
   889 ;; This function is called by:
   890 ;;		_main
   891 ;; This function uses a non-reentrant model
   892 ;;
   893                           
   894                           	psect	text4
   895  0000'                    __ptext4:
   896                           	opt stack 0
   897  0000'                    _check_matrix_keypad:
   898                           	opt stack 28
   899                           
   900                           ;main.c: 110: unsigned char key;
   901                           ;main.c: 111: unsigned int i;
   902                           ;main.c: 114: key = read_switches(1);
   903                           
   904                           ;incstack = 0
   905  0000' 0E01               	movlw	1
   906  0002' EC00' F000'        	call	_read_switches
   907  0006' 6E03'              	movwf	check_matrix_keypad@key,c
   908                           
   909                           ;main.c: 116: if (key != 0xff)
   910  0008' 2803'              	incf	check_matrix_keypad@key,w,c
   911  000A' B4D8               	btfsc	status,2,c
   912  000C' 0012               	return	
   913                           
   914                           ;main.c: 117: {
   915                           ;main.c: 118: for(int i=0;i<8;i++)
   916  000E' 0E00               	movlw	0
   917  0010' 6E05'              	movwf	check_matrix_keypad@i_158+1,c
   918  0012' 0E00               	movlw	0
   919  0014' 6E04'              	movwf	check_matrix_keypad@i_158,c
   920  0016'                    l963:
   921  0016' BE05'              	btfsc	check_matrix_keypad@i_158+1,7,c
   922  0018' D006               	goto	l967
   923  001A' 5005'              	movf	check_matrix_keypad@i_158+1,w,c
   924  001C' E114               	bnz	l975
   925  001E' 0E08               	movlw	8
   926  0020' 5C04'              	subwf	check_matrix_keypad@i_158,w,c
   927  0022' B0D8               	btfsc	status,0,c
   928  0024' D010               	goto	l975
   929  0026'                    l967:
   930                           
   931                           ;main.c: 119: {
   932                           ;main.c: 120: passw[i]=key;
   933  0026' 0E00'              	movlw	low _passw
   934  0028' 2404'              	addwf	check_matrix_keypad@i_158,w,c
   935  002A' 6ED9               	movwf	fsr2l,c
   936  002C' 0E00'              	movlw	high _passw
   937  002E' 2005'              	addwfc	check_matrix_keypad@i_158+1,w,c
   938  0030' 6EDA               	movwf	fsr2h,c
   939  0032' C003' FFDF         	movff	check_matrix_keypad@key,indf2
   940                           
   941                           ;main.c: 121: clcd_putch('*' , (0xC0 + (0)));
   942  0036' 0EC0               	movlw	192
   943  0038' 6E00'              	movwf	_clcd_putch$1,c
   944  003A' 0E2A               	movlw	42
   945  003C' EC00' F000'        	call	_clcd_putch
   946  0040' 4A04'              	infsnz	check_matrix_keypad@i_158,f,c
   947  0042' 2A05'              	incf	check_matrix_keypad@i_158+1,f,c
   948  0044' D7E8               	goto	l963
   949  0046'                    l975:
   950                           
   951                           ;main.c: 123: }
   952                           ;main.c: 124: for (i = 50000; i--;);
   953  0046' 0EC3               	movlw	195
   954  0048' 6E02'              	movwf	check_matrix_keypad@i+1,c
   955  004A' 0E50               	movlw	80
   956  004C' 6E01'              	movwf	check_matrix_keypad@i,c
   957  004E'                    l977:
   958  004E' 0601'              	decf	check_matrix_keypad@i,f,c
   959  0050' A0D8               	btfss	status,0,c
   960  0052' 0602'              	decf	check_matrix_keypad@i+1,f,c
   961  0054' 2801'              	incf	check_matrix_keypad@i,w,c
   962  0056' E1FB               	bnz	l977
   963  0058' 2802'              	incf	check_matrix_keypad@i+1,w,c
   964  005A' B4D8               	btfsc	status,2,c
   965  005C' 0012               	return	
   966  005E' D7F7               	goto	l977
   967  0060'                    __end_of_check_matrix_keypad:
   968                           	opt stack 0
   969                           tblptru	equ	0xFF8
   970                           tblptrh	equ	0xFF7
   971                           tblptrl	equ	0xFF6
   972                           tablat	equ	0xFF5
   973                           postinc0	equ	0xFEE
   974                           wreg	equ	0xFE8
   975                           postinc1	equ	0xFE6
   976                           fsr1h	equ	0xFE2
   977                           fsr1l	equ	0xFE1
   978                           indf2	equ	0xFDF
   979                           postinc2	equ	0xFDE
   980                           fsr2h	equ	0xFDA
   981                           fsr2l	equ	0xFD9
   982                           status	equ	0xFD8
   983                           
   984 ;; *************** function _read_switches *****************
   985 ;; Defined at:
   986 ;;		line 128 in file "main.c"
   987 ;; Parameters:    Size  Location     Type
   988 ;;  detection_ty    1    wreg     unsigned char 
   989 ;; Auto vars:     Size  Location     Type
   990 ;;  detection_ty    1    0[COMRAM] unsigned char 
   991 ;; Return value:  Size  Location     Type
   992 ;;                  1    wreg      unsigned char 
   993 ;; Registers used:
   994 ;;		wreg, status,2, status,0, cstack
   995 ;; Tracked objects:
   996 ;;		On entry : 0/0
   997 ;;		On exit  : 0/0
   998 ;;		Unchanged: 0/0
   999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1000 ;;      Params:         0       0       0       0       0       0       0
  1001 ;;      Locals:         1       0       0       0       0       0       0
  1002 ;;      Temps:          0       0       0       0       0       0       0
  1003 ;;      Totals:         1       0       0       0       0       0       0
  1004 ;;Total ram usage:        1 bytes
  1005 ;; Hardware stack levels used:    1
  1006 ;; Hardware stack levels required when called:    1
  1007 ;; This function calls:
  1008 ;;		_scan_key
  1009 ;; This function is called by:
  1010 ;;		_check_matrix_keypad
  1011 ;; This function uses a non-reentrant model
  1012 ;;
  1013                           
  1014                           	psect	text5
  1015  0000'                    __ptext5:
  1016                           	opt stack 0
  1017  0000'                    _read_switches:
  1018                           	opt stack 28
  1019                           
  1020                           ;incstack = 0
  1021                           ;read_switches@detection_type stored from wreg
  1022  0000' 6E00'              	movwf	read_switches@detection_type,c
  1023                           
  1024                           ;main.c: 130: static unsigned char once = 1, key;
  1025                           ;main.c: 132: if (detection_type == 1)
  1026  0002' 0400'              	decf	read_switches@detection_type,w,c
  1027  0004' A4D8               	btfss	status,2,c
  1028  0006' D013               	goto	l815
  1029                           
  1030                           ;main.c: 133: {
  1031                           ;main.c: 134: key = scan_key();
  1032  0008' EC00' F000'        	call	_scan_key	;wreg free
  1033  000C' 6E12'              	movwf	read_switches@key,c
  1034                           
  1035                           ;main.c: 135: if(key != 0xFF && once )
  1036  000E' 2812'              	incf	read_switches@key,w,c
  1037  0010' B4D8               	btfsc	status,2,c
  1038  0012' D007               	goto	l811
  1039  0014' 5000'              	movf	read_switches@once,w,c
  1040  0016' B4D8               	btfsc	status,2,c
  1041  0018' D004               	goto	l811
  1042                           
  1043                           ;main.c: 136: {
  1044                           ;main.c: 137: once = 0;
  1045  001A' 0E00               	movlw	0
  1046  001C' 6E00'              	movwf	read_switches@once,c
  1047                           
  1048                           ;main.c: 138: return key;
  1049  001E' 5012'              	movf	read_switches@key,w,c
  1050  0020' 0012               	return	
  1051  0022'                    l811:
  1052                           
  1053                           ;main.c: 140: else if(key == 0xFF)
  1054  0022' 2812'              	incf	read_switches@key,w,c
  1055  0024' A4D8               	btfss	status,2,c
  1056  0026' D009               	goto	l821
  1057                           
  1058                           ;main.c: 141: {
  1059                           ;main.c: 142: once = 1;
  1060  0028' 0E01               	movlw	1
  1061  002A' 6E00'              	movwf	read_switches@once,c
  1062                           
  1063                           ;main.c: 143: }
  1064                           ;main.c: 144: }
  1065  002C' D006               	goto	l821
  1066  002E'                    l815:
  1067                           
  1068                           ;main.c: 145: else if (detection_type == 0)
  1069  002E' 5000'              	movf	read_switches@detection_type,w,c
  1070  0030' A4D8               	btfss	status,2,c
  1071  0032' D003               	goto	l821
  1072                           
  1073                           ;main.c: 146: {
  1074                           ;main.c: 147: return scan_key();
  1075  0034' EC00' F000'        	call	_scan_key	;wreg free
  1076  0038' 0012               	return	
  1077  003A'                    l821:
  1078                           
  1079                           ;main.c: 148: }
  1080                           ;main.c: 150: return 0xFF;
  1081  003A' 0EFF               	movlw	255
  1082  003C' 0012               	return	
  1083  003E'                    __end_of_read_switches:
  1084                           	opt stack 0
  1085                           tblptru	equ	0xFF8
  1086                           tblptrh	equ	0xFF7
  1087                           tblptrl	equ	0xFF6
  1088                           tablat	equ	0xFF5
  1089                           postinc0	equ	0xFEE
  1090                           wreg	equ	0xFE8
  1091                           postinc1	equ	0xFE6
  1092                           fsr1h	equ	0xFE2
  1093                           fsr1l	equ	0xFE1
  1094                           indf2	equ	0xFDF
  1095                           postinc2	equ	0xFDE
  1096                           fsr2h	equ	0xFDA
  1097                           fsr2l	equ	0xFD9
  1098                           status	equ	0xFD8
  1099                           
  1100 ;; *************** function _scan_key *****************
  1101 ;; Defined at:
  1102 ;;		line 152 in file "main.c"
  1103 ;; Parameters:    Size  Location     Type
  1104 ;;		None
  1105 ;; Auto vars:     Size  Location     Type
  1106 ;;		None
  1107 ;; Return value:  Size  Location     Type
  1108 ;;                  1    wreg      unsigned char 
  1109 ;; Registers used:
  1110 ;;		wreg
  1111 ;; Tracked objects:
  1112 ;;		On entry : 0/0
  1113 ;;		On exit  : 0/0
  1114 ;;		Unchanged: 0/0
  1115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1116 ;;      Params:         0       0       0       0       0       0       0
  1117 ;;      Locals:         0       0       0       0       0       0       0
  1118 ;;      Temps:          0       0       0       0       0       0       0
  1119 ;;      Totals:         0       0       0       0       0       0       0
  1120 ;;Total ram usage:        0 bytes
  1121 ;; Hardware stack levels used:    1
  1122 ;; This function calls:
  1123 ;;		Nothing
  1124 ;; This function is called by:
  1125 ;;		_read_switches
  1126 ;; This function uses a non-reentrant model
  1127 ;;
  1128                           
  1129                           	psect	text6
  1130  0000'                    __ptext6:
  1131                           	opt stack 0
  1132  0000'                    _scan_key:
  1133                           	opt stack 28
  1134                           
  1135                           ;main.c: 154: PORTBbits.RB5 = 0;
  1136                           
  1137                           ;incstack = 0
  1138  0000' 9A81               	bcf	3969,5,c	;volatile
  1139                           
  1140                           ;main.c: 155: PORTBbits.RB6 = 1;
  1141  0002' 8C81               	bsf	3969,6,c	;volatile
  1142                           
  1143                           ;main.c: 156: PORTBbits.RB7 = 1;
  1144  0004' 8E81               	bsf	3969,7,c	;volatile
  1145                           
  1146                           ;main.c: 158: if (PORTBbits.RB1 == 0)
  1147  0006' B281               	btfsc	3969,1,c	;volatile
  1148  0008' D002               	goto	l94
  1149                           
  1150                           ;main.c: 159: {
  1151                           ;main.c: 160: return 1;
  1152  000A' 0E01               	movlw	1
  1153  000C' 0012               	return	
  1154  000E'                    l94:
  1155                           
  1156                           ;main.c: 162: else if (PORTBbits.RB2 == 0)
  1157  000E' B481               	btfsc	3969,2,c	;volatile
  1158  0010' D002               	goto	l97
  1159                           
  1160                           ;main.c: 163: {
  1161                           ;main.c: 164: return 4;
  1162  0012' 0E04               	movlw	4
  1163  0014' 0012               	return	
  1164  0016'                    l97:
  1165                           
  1166                           ;main.c: 166: else if (PORTBbits.RB3 == 0)
  1167  0016' B681               	btfsc	3969,3,c	;volatile
  1168  0018' D002               	goto	l99
  1169                           
  1170                           ;main.c: 167: {
  1171                           ;main.c: 168: return 7;
  1172  001A' 0E07               	movlw	7
  1173  001C' 0012               	return	
  1174  001E'                    l99:
  1175                           
  1176                           ;main.c: 170: else if (PORTBbits.RB4 == 0)
  1177  001E' B881               	btfsc	3969,4,c	;volatile
  1178  0020' D002               	goto	l96
  1179                           
  1180                           ;main.c: 171: {
  1181                           ;main.c: 172: return 10;
  1182  0022' 0E0A               	movlw	10
  1183  0024' 0012               	return	
  1184  0026'                    l96:
  1185                           
  1186                           ;main.c: 173: }
  1187                           ;main.c: 175: PORTBbits.RB5 = 1;
  1188  0026' 8A81               	bsf	3969,5,c	;volatile
  1189                           
  1190                           ;main.c: 176: PORTBbits.RB6 = 0;
  1191  0028' 9C81               	bcf	3969,6,c	;volatile
  1192                           
  1193                           ;main.c: 177: PORTBbits.RB7 = 1;
  1194  002A' 8E81               	bsf	3969,7,c	;volatile
  1195                           
  1196                           ;main.c: 179: if (PORTBbits.RB1 == 0)
  1197  002C' B281               	btfsc	3969,1,c	;volatile
  1198  002E' D002               	goto	l102
  1199                           
  1200                           ;main.c: 180: {
  1201                           ;main.c: 181: return 2;
  1202  0030' 0E02               	movlw	2
  1203  0032' 0012               	return	
  1204  0034'                    l102:
  1205                           
  1206                           ;main.c: 183: else if (PORTBbits.RB2 == 0)
  1207  0034' B481               	btfsc	3969,2,c	;volatile
  1208  0036' D002               	goto	l104
  1209                           
  1210                           ;main.c: 184: {
  1211                           ;main.c: 185: return 5;
  1212  0038' 0E05               	movlw	5
  1213  003A' 0012               	return	
  1214  003C'                    l104:
  1215                           
  1216                           ;main.c: 187: else if (PORTBbits.RB3 == 0)
  1217  003C' B681               	btfsc	3969,3,c	;volatile
  1218  003E' D002               	goto	l106
  1219                           
  1220                           ;main.c: 188: {
  1221                           ;main.c: 189: return 8;
  1222  0040' 0E08               	movlw	8
  1223  0042' 0012               	return	
  1224  0044'                    l106:
  1225                           
  1226                           ;main.c: 191: else if (PORTBbits.RB4 == 0)
  1227  0044' B881               	btfsc	3969,4,c	;volatile
  1228  0046' D002               	goto	l771
  1229                           
  1230                           ;main.c: 192: {
  1231                           ;main.c: 193: return 11;
  1232  0048' 0E0B               	movlw	11
  1233  004A' 0012               	return	
  1234  004C'                    l771:
  1235                           
  1236                           ;main.c: 194: }
  1237                           ;main.c: 219: return 0xFF;
  1238  004C' 0EFF               	movlw	255
  1239  004E' 0012               	return	
  1240  0050'                    __end_of_scan_key:
  1241                           	opt stack 0
  1242                           tblptru	equ	0xFF8
  1243                           tblptrh	equ	0xFF7
  1244                           tblptrl	equ	0xFF6
  1245                           tablat	equ	0xFF5
  1246                           postinc0	equ	0xFEE
  1247                           wreg	equ	0xFE8
  1248                           postinc1	equ	0xFE6
  1249                           fsr1h	equ	0xFE2
  1250                           fsr1l	equ	0xFE1
  1251                           indf2	equ	0xFDF
  1252                           postinc2	equ	0xFDE
  1253                           fsr2h	equ	0xFDA
  1254                           fsr2l	equ	0xFD9
  1255                           status	equ	0xFD8
  1256                           tblptru	equ	0xFF8
  1257                           tblptrh	equ	0xFF7
  1258                           tblptrl	equ	0xFF6
  1259                           tablat	equ	0xFF5
  1260                           postinc0	equ	0xFEE
  1261                           wreg	equ	0xFE8
  1262                           postinc1	equ	0xFE6
  1263                           fsr1h	equ	0xFE2
  1264                           fsr1l	equ	0xFE1
  1265                           indf2	equ	0xFDF
  1266                           postinc2	equ	0xFDE
  1267                           fsr2h	equ	0xFDA
  1268                           fsr2l	equ	0xFD9
  1269                           status	equ	0xFD8
  1270                           
  1271                           	psect	rparam
  1272  0000                     tblptru	equ	0xFF8
  1273                           tblptrh	equ	0xFF7
  1274                           tblptrl	equ	0xFF6
  1275                           tablat	equ	0xFF5
  1276                           postinc0	equ	0xFEE
  1277                           wreg	equ	0xFE8
  1278                           postinc1	equ	0xFE6
  1279                           fsr1h	equ	0xFE2
  1280                           fsr1l	equ	0xFE1
  1281                           indf2	equ	0xFDF
  1282                           postinc2	equ	0xFDE
  1283                           fsr2h	equ	0xFDA
  1284                           fsr2l	equ	0xFD9
  1285                           status	equ	0xFD8


Data Sizes:
    Strings     64
    Constant    0
    Data        1
    BSS         19
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     23      43
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    clcd_print@data	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_5(CODE[7]), STR_4(CODE[15]), STR_3(CODE[15]), STR_2(CODE[12]), 
		 -> STR_1(CODE[15]), 


Critical Paths under _main in COMRAM

    _main->_check_matrix_keypad
    _init_config->_clcd_write
    _clcd_print->_clcd_write
    _check_matrix_keypad->_clcd_putch
    _check_matrix_keypad->_read_switches

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                17    17      0    1958
                                              6 COMRAM    17    17      0
                _check_matrix_keypad
                         _clcd_print
                         _clcd_putch
                        _init_config
 ---------------------------------------------------------------------------------
 (1) _init_config                                          0     0      0     428
                         _clcd_write
 ---------------------------------------------------------------------------------
 (1) _clcd_print                                           3     0      3    1135
                                              2 COMRAM     3     0      3
                         _clcd_write
 ---------------------------------------------------------------------------------
 (2) _clcd_write                                           2     1      1     428
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _check_matrix_keypad                                  5     5      0     188
                                              1 COMRAM     5     5      0
                         _clcd_putch
                      _read_switches
 ---------------------------------------------------------------------------------
 (2) _read_switches                                        1     1      0      30
                                              0 COMRAM     1     1      0
                           _scan_key
 ---------------------------------------------------------------------------------
 (3) _scan_key                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _clcd_putch                                           1     0      1      22
                                              0 COMRAM     1     0      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _check_matrix_keypad
     _clcd_putch
     _read_switches
       _scan_key
   _clcd_print
     _clcd_write
   _clcd_putch
   _init_config
     _clcd_write

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     17      2B       1       45.3%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      2B       3        0.0%
DATA                 0      0      2B      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.36 build -262312587 
Symbol Table                                                                                   Fri Jun 16 02:35:23 2023

              clcd_print@addr 000004                clcd_print@data 000002                            l43 000094  
                          l94 00000E                            l96 000026                            l97 000016  
                          l99 00001E                           l102 000034                           l104 00003C  
                         l106 000044                           l811 000022                           l821 00003A  
                         l815 00002E                           l771 00004C                           l927 000014  
                         l951 00000C                           l963 000016                           l955 000024  
                         l975 000046                           l967 000026                           l991 000068  
                         l977 00004E                           l993 00007E                           l995 000084  
                         l987 00002C                           l997 0000A2                           l989 00005C  
                         _RC0 007C10                           _RC1 007C11                           _RC2 007C12  
                         _RD7 007C1F                           wreg 000FE8                          l1001 0000C6  
                        l1003 0000CA                          l1021 000140                          l1017 000126  
                        l1009 0000F4                          STR_1 00001F                          STR_2 00002E  
                        STR_3 000010                          STR_4 000001                          STR_5 00003A  
                        _main 000000                          fsr1l 000FE1                          indf2 000FDF  
                        fsr2l 000FD9                          start 000000*                 ___param_bank 000010  
              clcd_write@byte 000001                         ?_main 000000                  ?_init_config 000000  
                       _PORTB 000F81                         _PORTD 000F83                         _TRISB 000F93  
                       _TRISC 000F94                         _TRISD 000F95           _check_matrix_keypad 000000  
                       _passw 000000                         main@i 000015                         tablat 000FF5  
                       status 000FD8               __initialization 000000                  __end_of_main 000152  
        ?_check_matrix_keypad 000000                 main@delay_145 00000A                        ??_main 000006  
               __activetblptr 000001              read_switches@key 000012         ??_check_matrix_keypad 000001  
                      clear_0 000006              __end_of_scan_key 000050                  __pdataCOMRAM 000000  
                __mediumconst 000000*                       tblptrh 000FF7                        tblptrl 000FF6  
                      tblptru 000FF8                    __accesstop 000000*      __end_of__initialization 00001E  
               ___rparam_used 000001                __pcstackCOMRAM 000000        __size_of_read_switches 000000  
        __size_of_init_config 000000                  _clcd_putch$1 000000                    _clcd_print 000000  
                  _clcd_putch 000000*                   _clcd_write 000000             read_switches@once 000000  
               _read_switches 000000                     ?_scan_key 000000                       __Hparam 000000  
                     __Lparam 000000                  __psmallconst 000000                       __pcinit 000000  
                     __ramtop 000000*                      __ptext0 000000                       __ptext1 000000  
                     __ptext2 000000                       __ptext3 000000                       __ptext4 000000  
                     __ptext5 000000                       __ptext6 000000                ?_read_switches 000000  
        end_of_initialization 00001E                    ??_scan_key 000000                   ?_clcd_print 000002  
                 ?_clcd_putch 000000                   ?_clcd_write 000000                       postinc0 000FEE  
                     postinc1 000FE6                       postinc2 000FDE                     _PORTBbits 000F81  
                  main@chance 000013   __end_of_check_matrix_keypad 000060                 __pidataCOMRAM 000000  
         start_initialization 000000               ??_read_switches 000000           __size_of_clcd_print 000000  
         __size_of_clcd_write 000000   read_switches@detection_type 000000                 ??_init_config 000002  
                 __pbssCOMRAM 000000             __size_of_scan_key 000000                   __smallconst 000000* 
         __end_of_init_config 00003E                  ??_clcd_print 000005                  ??_clcd_putch 000001  
                ??_clcd_write 000001                     _pre_passw 000009         clcd_write@control_bit 000000  
                   main@delay 00000F            __end_of_clcd_print 000038            __end_of_clcd_write 000024  
                    __Hrparam 000000*                     __Lrparam 000000*                 __Lsmallconst 000000* 
                 _init_config 000000                 __size_of_main 000000                      _scan_key 000000  
__size_of_check_matrix_keypad 000000                      main@flag 00000E      check_matrix_keypad@i_158 000004  
       __end_of_read_switches 00003E        check_matrix_keypad@key 000003          check_matrix_keypad@i 000001  
